#!/usr/bin/env python3
import xml.etree.ElementTree as ET
import argparse, sys
import ipaddress

"""
example nmap scan syntax: nmap -sV -sC -oX nmap 10.10.42.253
Your nmap scan always has to include a -oX to get XML output
"""

parser=argparse.ArgumentParser()
parser.add_argument('nmap_file', help='Nmap XML formatted output file')
parser.add_argument('--script', '-s', help='Specify which filter script to use', 
                    choices=['get_ports', 'get_hosts', 'get_services', 'get_http_urls'])
parser.add_argument('--ips', '-i', help='filter on ip or cidr block, specify single ip or a cidr range')
args=parser.parse_args()

def get_ports(hosts):
    """
    Get a list of open ports for each hostname
    Each hostname will only take up one line
    Which makes for a compact format
    Accepts an object of type xmltree as returned by filter_ips()
    """
    for host in hosts:
        ports = [port.attrib['portid'] for port in host.find('ports').findall('port')]
        print(f"{host.find('address').attrib['addr']}: {','.join(ports)}")

def get_hosts(hosts):
    """
    Get only the live hosts, one per line. This is usefull when
    scanning the network in stages (eg using -sn)
    Accepts an object of type xmltree as returned by filter_ips()
    """
    for host in hosts:
        print(host.find('address').attrib['addr'])

def get_services(hosts):
    """
    Get a list of open ports with service details
    Supports multiple hostnames per file
    Accepts an object of type xmltree as returned by filter_ips()
    """
    for host in hosts:
        print(host.find('address').attrib['addr'])
        ports = [port for port in host.find('ports').findall('port')]
        for port in ports:
            services = ""
            for service in port.findall('service'):
                for attrib in service.attrib:
                    services += f"{attrib}: {service.attrib[attrib]}, "
            print(f"{port.attrib['portid']} || {services[:-2]}")

def get_http_urls(hosts):
    """
    Get a list of URLs in the form http(s)://xxx.abc.
    Only http or https URLs will be listed! 
    """
    for host in hosts:
        host_addr = host.find('address').attrib['addr']
        ports = [port for port in host.find('ports').findall('port')]
        for port in ports:
            for service in port.findall('service'):
                service_name = service.attrib.get('name')
                if service_name in ['http', 'https']:
                    print(f"{service_name}://{host_addr}:{port.attrib['portid']}")

def filter_ips(nmap_file, ip_filter):
    """
    Filter the nmap output based on ip or cidr block
    Returns an array of objects of class xml.etree.ElementTree.Element
    These objectes will contain the details for a host that matched the filter
    """
    if ip_filter is not None:
        xmltree = ET.parse(nmap_file)
        hosts = []
        for host in xmltree.getroot().findall('host'):
            net = ipaddress.IPv4Network(ip_filter)
            ip = ipaddress.IPv4Address(host.find('address').attrib['addr'])
            if ip in net:
                hosts.append(host)
        return hosts
    else:
        xmltree = ET.parse(nmap_file)
        return xmltree.getroot().findall('host')
    
if __name__ == "__main__":
    if args.script == "get_services":
        get_services(filter_ips(args.nmap_file, args.ips))
    elif args.script == "get_hosts":
        get_hosts(filter_ips(args.nmap_file, args.ips))
    elif args.script == "get_http_urls":
        get_http_urls(filter_ips(args.nmap_file, args.ips))
    else:
        get_ports(filter_ips(args.nmap_file, args.ips))
